// ðŸ§± Bloque 1: DeclaraciÃ³n del paquete e imports
package com.mycompany.postuladoscuanticos;

// ImportaciÃ³n de librerÃ­as
import javax.swing.*;            //Componentes de interfaz grÃ¡fica
import java.awt.*;               //Clases para manejo de colores y fuentes
import java.awt.event.*;         //Manejo de eventos (clicks)

//Ventana para calcular las incertidumbres segÃºn el principio de Heisenberg
// Implementa: Î”xÂ·Î”p â‰¥ Ä§/2 (donde Ä§ = h/2Ï€)
public class VentanaHeisenberg extends JFrame implements ActionListener {
    
    // ðŸ§± Bloque 2: DeclaraciÃ³n de componentes
    private JTextField txtDeltaX, txtMasa; //Campo para incertidumbre en posiciÃ³n (nm) y masa de la partÃ­cula(kg)
    private JLabel lblDeltaP, lblDeltaV; //Etiqueta para mostrar momento y velocidad
    private JButton btnVolver, btnCalcular; //BotÃ³n para regresar al menu y realizar el cÃ¡lculo

    // ðŸ§± Bloque 3: Constructor de la ventana
    public VentanaHeisenberg() {
        //ConfiguraciÃ³n de la ventana
        setTitle("Principio de Incertidumbre de Heisenberg");
        setSize(450, 300);                                     //Dimenciones (ancho, alto)
        setLayout(null);                                       //Layout absoluto posicionamiento
        setLocationRelativeTo(null);                           //Centrar ventana
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);     //Cierra la ventana
        EstilosSwing.aplicarFondoVentana(this);

        // ðŸ§± Bloque 4: ConfiguraciÃ³n de campos
        //campo de texto para Î”x (posiciÃ³n)
        JLabel lblDeltaX = new JLabel("Î”x (posiciÃ³n, nm):");
        lblDeltaX.setBounds(30, 30, 180, 20);
        lblDeltaX.setForeground(Color.WHITE);

        txtDeltaX = new JTextField("0.1"); //Valor por defecto, sepuede cambiar
        txtDeltaX.setBounds(220, 30, 180, 25);
        EstilosSwing.estilizarCampoTexto(txtDeltaX); //Estilo constante de EstilosSwing

        // Etiqueta y campo de texto para masa
        JLabel lblMasa = new JLabel("Masa (kg):");
        lblMasa.setBounds(30, 70, 180, 20);
        lblMasa.setForeground(Color.WHITE);

        txtMasa = new JTextField("9.109e-31");//Valor por defecto de la masa, se puede cambiar
        txtMasa.setBounds(220, 70, 180, 25);
        EstilosSwing.estilizarCampoTexto(txtMasa);
        // ðŸ§± Bloque 5: ConfiguraciÃ³n de Botones

        btnCalcular = EstilosSwing.crearBotonConHover("Calcular Incertidumbre", 120, 110, 200, 30);
        btnCalcular.addActionListener(this);

        // ðŸ§± Bloque 6: ConfiguraciÃ³n de etiquetas de resultados
        lblDeltaP = new JLabel("Î”p = ?"); //Incretidumbre en el momento
        lblDeltaP.setBounds(30, 160, 380, 20);
        EstilosSwing.estilizarLabelResultado(lblDeltaP);

        lblDeltaV = new JLabel("Î”v = ?"); //Incertidumbre en la velocidad
        lblDeltaV.setBounds(30, 190, 380, 20);
        EstilosSwing.estilizarLabelResultado(lblDeltaV);

        btnVolver = EstilosSwing.crearBotonConHover("Volver", 150, 230, 150, 30);
        btnVolver.addActionListener(e -> volverAPrincipal());

        // ðŸ§± Bloque 7: Agregar componentes a la ventana 
        add(lblDeltaX);
        add(txtDeltaX);
        add(lblMasa);
        add(txtMasa);
        add(btnCalcular);
        add(lblDeltaP);
        add(lblDeltaV);
        add(btnVolver);

        // ðŸ§± Bloque 8: Si el usuario cierra la ventana con"X"
        addWindowListener(new WindowAdapter() {
            
            public void windowClosed(WindowEvent e) {
                volverAPrincipal();
            }
        });
    }
    
    //ðŸ§± Bloque 9: MÃ©todo para cÃ¡lculo de incertidumbre
    public void actionPerformed(ActionEvent e) {
        try {
            double deltaX = Double.parseDouble(txtDeltaX.getText()) * 1e-9;
            double masa = Double.parseDouble(txtMasa.getText());

            double hbar = 1.0545718e-34; // Constante de Planck reducida
            double deltaP = hbar / (2 * deltaX);
            double deltaV = deltaP / masa;
            
            //Muestra el resultado en texto cientÃ­fico
            lblDeltaP.setText(String.format("Î”p â‰¥ %.3e kgÂ·m/s", deltaP));
            lblDeltaV.setText(String.format("Î”v â‰¥ %.3e m/s ", deltaV));
        } catch (NumberFormatException ex) {
            //Mensake de error de entrada no numÃ©rica
            JOptionPane.showMessageDialog(this, "Ingrese valores numÃ©ricos vÃ¡lidos", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // ðŸ§± Bloque 10: MÃ©todo para volver al menÃº
    private void volverAPrincipal() {
        this.dispose();
        new PostuladosCuanticos().setVisible(true);
    }
}
