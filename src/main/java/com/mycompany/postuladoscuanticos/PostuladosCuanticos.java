// üß± Bloque 1: Declaraci√≥n del paquete e imports
package com.mycompany.postuladoscuanticos;

import javax.swing.*;     //Componentes de interfaz gr√°fica
import java.awt.*;        //Clases para manejo de colores y fuentes
import java.awt.event.*;  //Manejo de eventos (clicks)
//Clase principal que representa la ventana del simulador 
//Hereda de JFrame para la ventan principal e implementa ActionListener para manejar eventos

public class PostuladosCuanticos extends JFrame implements ActionListener {

    // üß± Bloque 2: Componentes de interfaz
    private JButton btnDeBroglie, btnPlanck, btnSchrodinger, btnPauli, btnHeisenberg, btnSalir;
    private JLabel lblResultado;                 //√Årea para mostrar resultados/teor√≠a
    private JRadioButton rbTeoria, rbSimulacion; //Opci√≥n para mostrar teor√≠a o simulaci√≥n
    
    // üß± Bloque 3: Constructor de la ventana
    public PostuladosCuanticos() {
        // Configuraci√≥n de la ventana principal
        setTitle("Simulador de Postulados Cu√°nticos");
        setSize(700, 600);                                     //Tama√±o de la ventana
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);        //Cerrar el programa al salir
        setLayout(null);                                       //Layout absoluto posicionamiento
        setLocationRelativeTo(null);                           //Centrar ventana en pantalla
         EstilosSwing.aplicarFondoVentana(this);               //Estilo constante de EstilosSwing

        // üß± Bloque 4: Configuraci√≥n del T√≠tulo principal
        JLabel lblTitulo = new JLabel("POSTULADOS DE LA MEC√ÅNICA CU√ÅNTICA", SwingConstants.CENTER);
        lblTitulo.setBounds(50, 20, 600, 30);                    //Posici√≥n y tama√±o
        lblTitulo.setFont(new Font("Segoe UI", Font.BOLD, 18));  //Fuente
        lblTitulo.setForeground(Color.WHITE);                    //Color del texto
        add(lblTitulo);                                          //A√±adir a la ventana

        // üß± Bloque 5: Creaci√≥n de botones para cada postulado
        //Usa el m√©todo auxiliar crearBoton para mantener consistencia
        btnDeBroglie = crearBoton("De Broglie", 100, 80, 150, 40);
        btnPlanck = crearBoton("Ley de Planck", 275, 80, 150, 40);
        btnSchrodinger = crearBoton("Schr√∂dinger", 450, 80, 150, 40);
        btnPauli = crearBoton("Exclusi√≥n Pauli", 100, 140, 150, 40);
        btnHeisenberg = crearBoton("Heisenberg", 275, 140, 150, 40);
        btnSalir = crearBoton("Salir", 450, 140, 150, 40);

        // üß± Bloque 6: Configuraci√≥n de radio buttons para la seleccion de modo 
        rbTeoria = new JRadioButton("Teor√≠a", true); //Seleccionado por defecto
        rbTeoria.setBounds(50, 200, 80, 30);
        rbTeoria.setForeground(Color.WHITE);
        rbTeoria.setBackground(new Color(30, 30, 30));
        rbTeoria.setFont(new Font("Seoge UI", Font.PLAIN, 13));

        rbSimulacion = new JRadioButton("Simulaci√≥n");
        rbSimulacion.setBounds(140, 200, 100, 30);
        rbSimulacion.setForeground(Color.WHITE);
        rbSimulacion.setBackground(new Color(30, 30, 30));
        rbSimulacion.setFont(new Font("Seoge UI", Font.PLAIN, 14));
        
        //Agrupar los radio buttons para seleccion mutuamente exclusiva
        ButtonGroup grupo = new ButtonGroup();
        grupo.add(rbTeoria);
        grupo.add(rbSimulacion);
        add(rbTeoria);
        add(rbSimulacion);

        // üß± Bloque 7: Configuraci√≥n del √°rea de resultados
        lblResultado = new JLabel("Seleccione un postulado y un modo", SwingConstants.CENTER);
        lblResultado.setBounds(50, 240, 600, 250);                                 //Posici√≥n y tama√±o
        lblResultado.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));  //Borde
        lblResultado.setForeground(Color.WHITE);
        lblResultado.setFont(new Font("Seoge UI", Font.PLAIN, 13));
        add(lblResultado);
    }

    // üß± Bloque 8: M√©todo auxiliar para crear botones
    //Crea un bot√≥n con estilo consistente y efectos de hover
    private JButton crearBoton(String texto, int x, int y, int ancho, int alto) {
        JButton boton = new JButton(texto);
        boton.setBounds(x, y, ancho, alto);
        boton.setFont(new Font("Seoge UI", Font.PLAIN, 14));
        boton.setBackground(new Color(60, 63, 65));       //Color de fondo
        boton.setForeground(Color.WHITE);                 //Color de texto
        boton.setFocusPainted(false);                     //Quitar borde de enfoque 
        boton.setBorder(BorderFactory.createLineBorder(Color.GRAY)); //Borde
        boton.addActionListener(this);                    //Manejador de eventos
        
        //Efecto hover: cambia de color al pasar el mouse
        boton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                boton.setBackground(new Color(85, 110, 122));
            }

            public void mouseExited(java.awt.event.MouseEvent evt) {
                boton.setBackground(new Color(60, 63, 65));
            }
        });
        add(boton);
        return boton;
    }
    
    // üß± Bloque 9: Manejo de eventos de los botones
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == btnSalir) {
            System.exit(0);                   //Salir del programa
        } else if (rbTeoria.isSelected()) {
            mostrarTeoria(e.getSource());     //Mostrar Teor√≠a del Postulado
        } else {
            iniciarSimulacion(e.getSource()); //Iniciar Simulaci√≥n del postulado
        }
    }

    // üß± Bloque 10: M√©todo que muestra la Teoria de cada postulado
    private void mostrarTeoria(Object boton) {
        String teoria = "";
        if (boton == btnDeBroglie) {
            teoria = "<html><div style='padding:10px;'>"
                    + "<b style='color:#CCCCCC;'>Dualidad Onda-Part√≠cula (De Broglie, 1924):</b><br><br>"
                    + "<center>Œª = h/p</center><br>"
                    + "<b>Donde:</b><br>"
                    + "- Œª: Longitud de onda asociada (m)<br>"
                    + "- p: Momento lineal (p = m¬∑v) (kg¬∑m/s)<br>"
                    + "- h: Constante de Planck (6.626√ó10‚Åª¬≥‚Å¥ J¬∑s)<br><br>"
                    + "<b>Implicaci√≥n:</b> Toda part√≠cula material tiene propiedades ondulatorias.</div></html>";
        } else if (boton == btnPlanck) {
            teoria = "<html><div style='padding:10px;'>"
                    + "<b style='color:#CCCCCC;'>Ley de Planck (Cuerpo Negro, 1900):</b><br><br>"
                    + "<center>B(ŒΩ,T) = (2hŒΩ¬≥/c¬≤)¬∑1/(e^(hŒΩ/kT) - 1)</center><br>"
                    + "<b>Donde:</b><br>"
                    + "- B: Radiancia espectral (W/m¬≤¬∑Hz¬∑sr)<br>"
                    + "- ŒΩ: Frecuencia de la radiaci√≥n (Hz)<br>"
                    + "- T: Temperatura absoluta (K)<br>"
                    + "- k: Constante de Boltzmann (1.381√ó10‚Åª¬≤¬≥ J/K)<br><br>"
                    + "<b>Importancia:</b> Explica el espectro de emisi√≥n de cuerpos calientes.</div></html>";
        } else if (boton == btnSchrodinger) {
            teoria = "<html><div style='padding:10px;'>"
                    + "<b style='color:#CCCCCC;'>Ecuaci√≥n de Schr√∂dinger (1926):</b><br><br>"
                    + "<center>i‚Ñè¬∑‚àÇŒ®/‚àÇt = ƒ§Œ®</center><br>"
                    + "<b>Forma independiente del tiempo:</b><br>"
                    + "<center>ƒ§œà = Eœà</center><br>"
                    + "<b>Donde:</b><br>"
                    + "- Œ®: Funci√≥n de onda (dependiente del tiempo)<br>"
                    + "- œà: Funci√≥n de onda estacionaria<br>"
                    + "- ƒ§: Operador Hamiltoniano (-‚Ñè¬≤/2m¬∑‚àá¬≤ + V)<br>"
                    + "- E: Energ√≠a del estado cu√°ntico (J)<br><br>"
                    + "<b>Interpretaci√≥n:</b> Describe la evoluci√≥n de sistemas cu√°nticos.</div></html>";
        } else if (boton == btnPauli) {
            teoria = "<html><div style='padding:10px;'>"
                    + "<b style='color:#CCCCCC;'>Principio de Exclusi√≥n de Pauli (1925):</b><br><br>"
                    + "<center>Œ®(1,2) = -Œ®(2,1)</center><br>"
                    + "<b>Enunciado:</b> Dos fermiones id√©nticos no pueden ocupar el mismo estado cu√°ntico simult√°neamente.<br><br>"
                    + "<b>Consecuencias:</b><br>"
                    + "- Estructura de capas electr√≥nicas en √°tomos<br>"
                    + "- Estabilidad de la materia<br>"
                    + "- Clasificaci√≥n de part√≠culas (fermiones vs bosones)</div></html>";
        } else if (boton == btnHeisenberg) {
            teoria = "<html><div style='padding:10px;'>"
                    + "<b style='color:#CCCCCC;'>Principio de Incertidumbre (Heisenberg, 1927):</b><br><br>"
                    + "<center>Œîx¬∑Œîp ‚â• ‚Ñè/2</center><br>"
                    + "<center>ŒîE¬∑Œît ‚â• ‚Ñè/2</center><br>"
                    + "<b>Donde:</b><br>"
                    + "- Œîx: Incertidumbre en posici√≥n (m)<br>"
                    + "- Œîp: Incertidumbre en momento lineal (kg¬∑m/s)<br>"
                    + "- ŒîE: Incertidumbre en energ√≠a (J)<br>"
                    + "- Œît: Incertidumbre en tiempo (s)<br><br>"
                    + "<b>Implicaci√≥n:</b> L√≠mite fundamental en la medici√≥n simult√°nea de variables conjugadas.</div></html>";
        }

        lblResultado.setText(teoria);
        lblResultado.setFont(new Font("Seoge UI", Font.PLAIN, 12));
    }
    
    // üß± Bloque 11: M√©todo para iniciar simulaciones(manda a llamar a los demas c√≥digos)
    private void iniciarSimulacion(Object boton) {
        
        if (boton == btnDeBroglie) {
            new VentanaDeBroglie().setVisible(true);
        } else if (boton == btnPlanck) {
            new VentanaPlanck().setVisible(true);
        } else if (boton == btnSchrodinger) {
            new VentanaSchrodinger().setVisible(true);
        } else if (boton == btnPauli) {
            new VentanaPauli().setVisible(true);
        } else if (boton == btnHeisenberg) {
            new VentanaHeisenberg().setVisible(true);
        }
        this.dispose(); //Cierra la ventana principal
    }
    // üß± Bloque 12: M√©todo principal que ejecuta VentanaLogin para iniciar el programa 

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new VentanaLogin().setVisible(true));
    }
}